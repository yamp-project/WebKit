import importlib
import json
import os
import socket
import sys

from buildbot.plugins import util
from datetime import timedelta

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

loadConfig = importlib.import_module("ews-build.loadConfig")
events = importlib.import_module("ews-build.events")
utils = importlib.import_module("ews-build.utils")


# This is work-around for Twisted having a small size limit for patches. See https://bugs.webkit.org/show_bug.cgi?id=198851#c5
from twisted.spread import banana
banana.SIZE_LIMIT = 100 * 1024 * 1024

is_test_mode_enabled = utils.load_password('BUILDBOT_PRODUCTION') is None
custom_suffix = utils.get_custom_suffix()

# We are using multi-master setup with 2 masters.
# One master handles UI (web-server), and the other handles the back-end.
# If test mode is enabled, we use single master setup.
use_multi_master = not is_test_mode_enabled

c = BuildmasterConfig = {}

if use_multi_master:
    c['multiMaster'] = True
    c['mq'] = {
        'type': 'wamp',
        'router_url': 'ws://localhost:8080/ws',
        'realm': 'realm1',
        'wamp_debug_level': 'info'
    }

if is_test_mode_enabled:
    c['www'] = dict(port='tcp:8010:interface=127.0.0.1', allowed_origins=["*"])
    c['www']['custom_templates_dir'] = 'templates'
    c['www']['ui_default_config'] = {
        'Builders.show_workers_name': True,
        'Builders.buildFetchLimit': 1000,
    }

c['protocols'] = {'pb': {'port': 17000}}

c['title'] = f'WebKit EWS{custom_suffix.upper()}'
c['titleURL'] = f'https://ews-build.webkit{custom_suffix}.org/'

if is_test_mode_enabled:
    c['buildbotURL'] = 'http://localhost:8010/'
    c['db_url'] = 'sqlite:///state.sqlite?serialize_access=1'
else:
    c['buildbotURL'] = utils.load_password('MASTERCFG_BUILDBOT_URL', default='https://ews-build.webkit{}.org/'.format(custom_suffix))
    db_url = utils.load_password('DB_URL', None)
    db_name = utils.load_password('DB_NAME', None)
    db_username = utils.load_password('DB_USERNAME', None)
    db_password = utils.load_password('DB_PASSWORD', None)
    if None in [db_url, db_name, db_username, db_password]:
        print('Environment variables for DB not found. Please ensure these variables are set.')
        sys.exit(1)
    # See https://docs.buildbot.net/1.7.0/manual/configuration/global.html#database-specification
    c['db_url'] = 'postgresql://{}:{}@{}/{}'.format(db_username, db_password, db_url, db_name)
    # configure a janitor to delete old logs
    c['configurators'] = [util.JanitorConfigurator(logHorizon=timedelta(days=30), hour='1', dayOfWeek='*')]

c['logCompressionMethod'] = 'lz4'
c['buildbotNetUsageData'] = None

loadConfig.loadBuilderConfig(
    c, is_test_mode_enabled=is_test_mode_enabled,
    setup_main_schedulers=True,
    setup_force_schedulers=is_test_mode_enabled,
)
