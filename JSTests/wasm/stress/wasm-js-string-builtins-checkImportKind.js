//@ requireOptions("--useWasmJSStringBuiltins=true")

// Test case from rdar://158575083.
// Builtin import validation must ensure the import matching a builtin is of a function kind.
// In the spec, the check is implicit in the type match of the import against the builtin.

import * as assert from '../assert.js';

function assertThrowsCompileError(code, compileOptions) {
  function doCompile() {
    new WebAssembly.Module(code, compileOptions);
  }

  assert.throws(doCompile, WebAssembly.CompileError, "builtin import wasm:js-string:concat has an unexpected signature");
}

/*
(module
  (func $funcWithConcatSignature (import "env" "func")
    (param externref externref) (result (ref extern)))

  (global $fakeConcat (import "wasm:js-string" "concat") externref)

  (func (export "getFakeConcat") (result externref)
    global.get $fakeConcat
  )
)
*/
const WASM_MODULE_CODE = new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x02, 0x60, 0x02, 0x6f, 0x6f, 0x01, 0x64, 0x6f, 0x60, 0x00, 0x01, 0x6f, 0x02, 0x25, 0x02, 0x03, 0x65, 0x6e, 0x76, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x00, 0x00, 0x0e, 0x77, 0x61, 0x73, 0x6d, 0x3a, 0x6a, 0x73, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x06, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x03, 0x6f, 0x00, 0x03, 0x02, 0x01, 0x01, 0x07, 0x11, 0x01, 0x0d, 0x67, 0x65, 0x74, 0x46, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x00, 0x01, 0x0a, 0x06, 0x01, 0x04, 0x00, 0x23, 0x00, 0x0b]);

async function main() {
  const compileOptions = { builtins: ['js-string'] };
  assertThrowsCompileError(WASM_MODULE_CODE, compileOptions);
}

main().catch(e => {
    print(e);
});
