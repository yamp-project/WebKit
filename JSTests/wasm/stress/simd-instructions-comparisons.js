//@ requireOptions("--useWasmSIMD=1")
//@ skip if !$isSIMDPlatform
import { runSIMDTests } from "./simd-instructions-lib.js"

const verbose = false;

// Table-driven test data for SIMD comparison instructions
// Each entry: [instruction, input0, input1, expected_output]
const comparisonTests = [
    // i8x16.eq tests
    [
        "i8x16.eq",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],
    [
        "i8x16.eq",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x02, 0x7F, 0x81, 0xFF, 0x80, 0x03, 0x02, 0x05, 0x04, 0x07, 0x06, 0x09, 0x08, 0x0B, 0x0A],
        [0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ],
    [
        "i8x16.eq",
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ],

    // i8x16.ne tests
    [
        "i8x16.ne",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ],
    [
        "i8x16.ne",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x02, 0x7F, 0x81, 0xFF, 0x80, 0x03, 0x02, 0x05, 0x04, 0x07, 0x06, 0x09, 0x08, 0x0B, 0x0A],
        [0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.lt_s tests (signed less than)
    [
        "i8x16.lt_s",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x01, 0x02, 0x80, 0x7F, 0x00, 0x82, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C],
        [0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.lt_u tests (unsigned less than)
    [
        "i8x16.lt_u",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x01, 0x02, 0x80, 0x81, 0x00, 0x82, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C],
        [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.gt_s tests (signed greater than)
    [
        "i8x16.gt_s",
        [0x01, 0x02, 0x80, 0x7F, 0x00, 0x82, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.gt_u tests (unsigned greater than)
    [
        "i8x16.gt_u",
        [0x01, 0x02, 0x80, 0x81, 0x00, 0x82, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.le_s tests (signed less than or equal)
    [
        "i8x16.le_s",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.le_u tests (unsigned less than or equal)
    [
        "i8x16.le_u",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.ge_s tests (signed greater than or equal)
    [
        "i8x16.ge_s",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i8x16.ge_u tests (unsigned greater than or equal)
    [
        "i8x16.ge_u",
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0x00, 0x01, 0x7F, 0x80, 0xFF, 0x81, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B],
        [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ],

    // i16x8.eq tests
    [
        "i16x8.eq",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // All equal
    ],
    [
        "i16x8.eq",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0001, 0x0000, 0x8000, 0x7FFF, 0x8001, 0xFFFF, 0x0003, 0x0002],
        [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000] // All different
    ],

    // i16x8.ne tests
    [
        "i16x8.ne",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000] // All equal, so ne = false
    ],
    [
        "i16x8.ne",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0001, 0x0000, 0x8000, 0x7FFF, 0x8001, 0xFFFF, 0x0003, 0x0002],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // All different
    ],

    // i16x8.lt_s tests (signed less than)
    [
        "i16x8.lt_s",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0001, 0x0002, 0x8000, 0x7FFF, 0x0000, 0x8002, 0x0003, 0x0004],
        [0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // 0<1, 1<2, 0x7FFF>0x8000(signed), 0x8000<0x7FFF(signed), -1<0, etc.
    ],
    [
        "i16x8.lt_s",
        [0x0001, 0x0000, 0x7FFF, 0x8001, 0xFFFF, 0x0002, 0x8000, 0x0005],
        [0x0000, 0x0001, 0x8000, 0x8000, 0x0000, 0x0001, 0x7FFF, 0x0004],
        [0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000] // Mixed results: false, true, false, false, true, false, true, false
    ],

    // i16x8.lt_u tests (unsigned less than)
    [
        "i16x8.lt_u",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0001, 0x0002, 0x8000, 0x8001, 0x0000, 0x8002, 0x0003, 0x0004],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF] // All unsigned comparisons
    ],
    [
        "i16x8.lt_u",
        [0x0001, 0x0000, 0x8000, 0x7FFF, 0x0002, 0xFFFF, 0x8001, 0x0005],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0x0000, 0x0001, 0x8002, 0x0004],
        [0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000] // Mixed results: false, true, false, true, false, false, true, false
    ],

    // i16x8.gt_s tests (signed greater than)
    [
        "i16x8.gt_s",
        [0x0001, 0x0002, 0x8000, 0x7FFF, 0x0000, 0x8002, 0x0003, 0x0004],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // Reverse of lt_s test
    ],
    [
        "i16x8.gt_s",
        [0x0000, 0x0001, 0x8000, 0x8000, 0x0000, 0x0001, 0x7FFF, 0x0004],
        [0x0001, 0x0000, 0x7FFF, 0x8001, 0xFFFF, 0x0002, 0x8000, 0x0005],
        [0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000] // Mixed results: false, true, false, false, true, false, true, false
    ],

    // i16x8.gt_u tests (unsigned greater than)
    [
        "i16x8.gt_u",
        [0x0001, 0x0002, 0x8000, 0x8001, 0x0000, 0x8002, 0x0003, 0x0004],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF] // Reverse of lt_u test
    ],
    [
        "i16x8.gt_u",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0x0001, 0x0000, 0x8002, 0x0004],
        [0x0001, 0x0000, 0x8000, 0x7FFF, 0x0002, 0xFFFF, 0x8001, 0x0005],
        [0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x0000] // Mixed results: false, true, false, true, false, false, true, false
    ],

    // i16x8.le_s tests (signed less than or equal)
    [
        "i16x8.le_s",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // All equal
    ],

    // i16x8.le_u tests (unsigned less than or equal)
    [
        "i16x8.le_u",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // All equal
    ],

    // i16x8.ge_s tests (signed greater than or equal)
    [
        "i16x8.ge_s",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // All equal
    ],

    // i16x8.ge_u tests (unsigned greater than or equal)
    [
        "i16x8.ge_u",
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0x0000, 0x0001, 0x7FFF, 0x8000, 0xFFFF, 0x8001, 0x0002, 0x0003],
        [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF] // All equal
    ],

    // i32x4.eq tests
    [
        "i32x4.eq",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],
    [
        "i32x4.eq",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345679, 0x9ABCDEF0, 0x11111110, 0x22222222],
        [0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF] // Different, equal, different, equal
    ],

    // i32x4.ne tests
    [
        "i32x4.ne",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x00000000, 0x00000000, 0x00000000, 0x00000000] // All equal, so ne = false
    ],
    [
        "i32x4.ne",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345679, 0x9ABCDEF0, 0x11111110, 0x22222222],
        [0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000] // Different, equal, different, equal
    ],

    // i32x4.lt_s tests (signed less than)
    [
        "i32x4.lt_s",
        [0x00000000, 0x7FFFFFFF, 0x80000000, 0xFFFFFFFF],
        [0x00000001, 0x80000000, 0x7FFFFFFF, 0x00000000],
        [0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF] // 0<1, 0x7FFFFFFF>0x80000000(signed), 0x80000000<0x7FFFFFFF(signed), -1<0
    ],
    [
        "i32x4.lt_s",
        [0x00000001, 0x80000000, 0x00000000, 0x7FFFFFFF],
        [0x00000000, 0x7FFFFFFF, 0xFFFFFFFF, 0x80000000],
        [0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000] // Mixed results: false, true, false, false
    ],

    // i32x4.lt_u tests (unsigned less than)
    [
        "i32x4.lt_u",
        [0x00000000, 0x7FFFFFFF, 0x80000000, 0xFFFFFFFF],
        [0x00000001, 0x80000000, 0x80000001, 0x00000000],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000] // All unsigned comparisons
    ],
    [
        "i32x4.lt_u",
        [0x00000001, 0x80000000, 0x00000000, 0x7FFFFFFF],
        [0x00000000, 0x7FFFFFFF, 0xFFFFFFFF, 0x80000000],
        [0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF] // Mixed results: false, false, true, true
    ],

    // i32x4.gt_s tests (signed greater than)
    [
        "i32x4.gt_s",
        [0x00000001, 0x80000000, 0x7FFFFFFF, 0x00000000],
        [0x00000000, 0x7FFFFFFF, 0x80000000, 0xFFFFFFFF],
        [0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF] // Reverse of lt_s test
    ],
    [
        "i32x4.gt_s",
        [0x00000000, 0x7FFFFFFF, 0xFFFFFFFF, 0x80000000],
        [0x00000001, 0x80000000, 0x00000000, 0x7FFFFFFF],
        [0x00000000, 0xFFFFFFFF, 0x00000000, 0x00000000] // Mixed results: false, true, false, false
    ],

    // i32x4.gt_u tests (unsigned greater than)
    [
        "i32x4.gt_u",
        [0x00000001, 0x80000000, 0x80000001, 0x00000000],
        [0x00000000, 0x7FFFFFFF, 0x80000000, 0xFFFFFFFF],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000] // Reverse of lt_u test
    ],
    [
        "i32x4.gt_u",
        [0x00000000, 0x7FFFFFFF, 0xFFFFFFFF, 0x80000000],
        [0x00000001, 0x80000000, 0x00000000, 0x7FFFFFFF],
        [0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF] // Mixed results: false, false, true, true
    ],

    // i32x4.le_s tests (signed less than or equal)
    [
        "i32x4.le_s",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],

    // i32x4.le_u tests (unsigned less than or equal)
    [
        "i32x4.le_u",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],

    // i32x4.ge_s tests (signed greater than or equal)
    [
        "i32x4.ge_s",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],

    // i32x4.ge_u tests (unsigned greater than or equal)
    [
        "i32x4.ge_u",
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0x12345678, 0x9ABCDEF0, 0x11111111, 0x22222222],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],

    // f32x4.eq tests
    [
        "f32x4.eq",
        [1.5, -2.25, 3.75, -4.125],
        [1.5, -2.25, 3.75, -4.125],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],
    [
        "f32x4.eq",
        [1.5, -2.25, 3.75, -4.125],
        [1.6, -2.25, 3.76, -4.125],
        [0x00000000, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF] // Different, equal, different, equal
    ],

    // f32x4.ne tests
    [
        "f32x4.ne",
        [1.5, -2.25, 3.75, -4.125],
        [1.5, -2.25, 3.75, -4.125],
        [0x00000000, 0x00000000, 0x00000000, 0x00000000] // All equal, so ne = false
    ],
    [
        "f32x4.ne",
        [1.5, -2.25, 3.75, -4.125],
        [1.6, -2.25, 3.76, -4.125],
        [0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0x00000000] // Different, equal, different, equal
    ],

    // f32x4.lt tests
    [
        "f32x4.lt",
        [1.0, -2.0, 3.0, -4.0],
        [2.0, -1.0, 4.0, -3.0],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // 1.0<2.0, -2.0<-1.0, 3.0<4.0, -4.0<-3.0
    ],

    // f32x4.gt tests
    [
        "f32x4.gt",
        [2.0, -1.0, 4.0, -3.0],
        [1.0, -2.0, 3.0, -4.0],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // 2.0>1.0, -1.0>-2.0, 4.0>3.0, -3.0>-4.0
    ],

    // f32x4.le tests
    [
        "f32x4.le",
        [1.5, -2.25, 3.75, -4.125],
        [1.5, -2.25, 3.75, -4.125],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],

    // f32x4.ge tests
    [
        "f32x4.ge",
        [1.5, -2.25, 3.75, -4.125],
        [1.5, -2.25, 3.75, -4.125],
        [0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF] // All equal
    ],

    // f64x2.eq tests
    [
        "f64x2.eq",
        [1.25, -3.5],
        [1.25, -3.5],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // Both equal
    ],
    [
        "f64x2.eq",
        [1.25, -3.5],
        [1.26, -3.5],
        [0x0000000000000000n, 0xFFFFFFFFFFFFFFFFn] // Different, equal
    ],

    // f64x2.ne tests
    [
        "f64x2.ne",
        [1.25, -3.5],
        [1.25, -3.5],
        [0x0000000000000000n, 0x0000000000000000n] // Both equal, so ne = false
    ],
    [
        "f64x2.ne",
        [1.25, -3.5],
        [1.26, -3.5],
        [0xFFFFFFFFFFFFFFFFn, 0x0000000000000000n] // Different, equal
    ],

    // f64x2.lt tests
    [
        "f64x2.lt",
        [1.0, -2.0],
        [2.0, -1.0],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // 1.0<2.0, -2.0<-1.0
    ],

    // f64x2.gt tests
    [
        "f64x2.gt",
        [2.0, -1.0],
        [1.0, -2.0],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // 2.0>1.0, -1.0>-2.0
    ],

    // f64x2.le tests
    [
        "f64x2.le",
        [1.25, -3.5],
        [1.25, -3.5],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // Both equal
    ],

    // f64x2.ge tests
    [
        "f64x2.ge",
        [1.25, -3.5],
        [1.25, -3.5],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // Both equal
    ],

    // i64x2.eq tests
    [
        "i64x2.eq",
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // Both equal
    ],
    [
        "i64x2.eq",
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0x123456789ABCDEF1n, 0xFEDCBA9876543210n],
        [0x0000000000000000n, 0xFFFFFFFFFFFFFFFFn] // Different, equal
    ],

    // i64x2.ne tests
    [
        "i64x2.ne",
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0x0000000000000000n, 0x0000000000000000n] // Both equal, so ne = false
    ],
    [
        "i64x2.ne",
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0x123456789ABCDEF1n, 0xFEDCBA9876543210n],
        [0xFFFFFFFFFFFFFFFFn, 0x0000000000000000n] // Different, equal
    ],

    // i64x2.lt_s tests (signed less than)
    [
        "i64x2.lt_s",
        [0x0000000000000000n, 0x7FFFFFFFFFFFFFFFn],
        [0x0000000000000001n, 0x8000000000000000n],
        [0xFFFFFFFFFFFFFFFFn, 0x0000000000000000n] // 0<1, 0x7FFFFFFF...>0x8000000...(signed)
    ],
    [
        "i64x2.lt_s",
        [0x8000000000000000n, 0xFFFFFFFFFFFFFFFFn],
        [0x7FFFFFFFFFFFFFFFn, 0x0000000000000000n],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // 0x8000000...<0x7FFFFFFF...(signed), -1<0
    ],

    // i64x2.gt_s tests (signed greater than)
    [
        "i64x2.gt_s",
        [0x0000000000000001n, 0x8000000000000000n],
        [0x0000000000000000n, 0x7FFFFFFFFFFFFFFFn],
        [0xFFFFFFFFFFFFFFFFn, 0x0000000000000000n] // 1>0, 0x8000000...>0x7FFFFFFF...(signed)
    ],
    [
        "i64x2.gt_s",
        [0x7FFFFFFFFFFFFFFFn, 0x0000000000000000n],
        [0x8000000000000000n, 0xFFFFFFFFFFFFFFFFn],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // 0x7FFFFFFF...>0x8000000...(signed), 0>-1
    ],

    // i64x2.le_s tests (signed less than or equal)
    [
        "i64x2.le_s",
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // Both equal
    ],
    [
        "i64x2.le_s",
        [0x0000000000000000n, 0x8000000000000000n],
        [0x0000000000000001n, 0x7FFFFFFFFFFFFFFFn],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // 0<=1, 0x8000000...<=0x7FFFFFFF...(signed)
    ],

    // i64x2.ge_s tests (signed greater than or equal)
    [
        "i64x2.ge_s",
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0x123456789ABCDEF0n, 0xFEDCBA9876543210n],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // Both equal
    ],
    [
        "i64x2.ge_s",
        [0x0000000000000001n, 0x7FFFFFFFFFFFFFFFn],
        [0x0000000000000000n, 0x8000000000000000n],
        [0xFFFFFFFFFFFFFFFFn, 0xFFFFFFFFFFFFFFFFn] // 1>=0, 0x7FFFFFFF...>=0x8000000...(signed)
    ]
];

await runSIMDTests(comparisonTests, verbose, "SIMD comparison");
