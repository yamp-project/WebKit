// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#pragma once

#include <array>
#include <wtf/HashFunctions.h>
#include <wtf/HashTraits.h>

namespace WebCore {

class Settings;

enum CSSPropertyID : uint16_t {
    CSSPropertyInvalid = 0,
    CSSPropertyCustom = 1,
    CSSPropertyTestTopPriority = 2,
    CSSPropertyTestHighPriority = 3,
    CSSPropertyBackgroundFillLayerTestPrimary = 4,
    CSSPropertyTestMediumPriority = 5,
    CSSPropertyBackgroundFillLayerTestSecondary = 6,
    CSSPropertyBackgroundFillLayerTestSecondaryWithConverter = 7,
    CSSPropertyFirstTestDescriptorForFirstDescriptor = 8,
    CSSPropertyFirstTestDescriptorForSecondDescriptor = 9,
    CSSPropertyTestAnimationWrapper = 10,
    CSSPropertyTestAnimationWrapperAccelerationAlways = 11,
    CSSPropertyTestAnimationWrapperAccelerationThreadedOnly = 12,
    CSSPropertyTestAutoFunctions = 13,
    CSSPropertyTestBoundedRepetitionWithCommas = 14,
    CSSPropertyTestBoundedRepetitionWithCommasFixed = 15,
    CSSPropertyTestBoundedRepetitionWithCommasNoSingleItemOpt = 16,
    CSSPropertyTestBoundedRepetitionWithCommasSingleItemOpt = 17,
    CSSPropertyTestBoundedRepetitionWithSpaces = 18,
    CSSPropertyTestBoundedRepetitionWithSpacesFixed = 19,
    CSSPropertyTestBoundedRepetitionWithSpacesNoSingleItemOpt = 20,
    CSSPropertyTestBoundedRepetitionWithSpacesSingleItemOpt = 21,
    CSSPropertyTestBoundedRepetitionWithSpacesWithType = 22,
    CSSPropertyTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt = 23,
    CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious = 24,
    CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo = 25,
    CSSPropertyTestColor = 26,
    CSSPropertyTestColorAllowsTypesAbsolute = 27,
    CSSPropertyTestColorPropertyWithNoVisitedLinkSupport = 28,
    CSSPropertyTestColorPropertyWithVisitedLinkSupport = 29,
    CSSPropertyTestCustomExtractor = 30,
    CSSPropertyTestExtractorConverter = 31,
    CSSPropertyTestFunctionBoundedParameters = 32,
    CSSPropertyTestFunctionFixedParameters = 33,
    CSSPropertyTestFunctionNoParameters = 34,
    CSSPropertyTestFunctionParametersMatchAllAnyOrder = 35,
    CSSPropertyTestFunctionParametersMatchAllAnyOrderWithOptional = 36,
    CSSPropertyTestFunctionParametersMatchAllOrdered = 37,
    CSSPropertyTestFunctionParametersMatchAllOrderedWithOptional = 38,
    CSSPropertyTestFunctionParametersMatchOneOrMoreAnyOrder = 39,
    CSSPropertyTestFunctionSingleParameter = 40,
    CSSPropertyTestFunctionSingleParameterMatchOne = 41,
    CSSPropertyTestFunctionSingleParameterOptional = 42,
    CSSPropertyTestFunctionUnboundedParametersNoMin = 43,
    CSSPropertyTestFunctionUnboundedParametersWithMinimum = 44,
    CSSPropertyTestImage = 45,
    CSSPropertyTestImageNoImageSet = 46,
    CSSPropertyTestKeyword = 47,
    CSSPropertyTestKeywordWithAliasedTo = 48,
    CSSPropertyTestMatchAllAnyOrder = 49,
    CSSPropertyTestMatchAllAnyOrderWithCustomType = 50,
    CSSPropertyTestMatchAllAnyOrderWithOptional = 51,
    CSSPropertyTestMatchAllAnyOrderWithOptionalAndCustomType = 52,
    CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType = 53,
    CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt = 54,
    CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType = 55,
    CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt = 56,
    CSSPropertyTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType = 57,
    CSSPropertyTestMatchAllAnyOrderWithOptionalNoSingleItemOpt = 58,
    CSSPropertyTestMatchAllAnyOrderWithOptionalSingleItemOpt = 59,
    CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrder = 60,
    CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt = 61,
    CSSPropertyTestMatchAllAnyOrderWithPreserveOrder = 62,
    CSSPropertyTestMatchAllAnyOrderWithPreserveOrderAndCustomType = 63,
    CSSPropertyTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt = 64,
    CSSPropertyTestMatchAllOrdered = 65,
    CSSPropertyTestMatchAllOrderedWithCustomType = 66,
    CSSPropertyTestMatchAllOrderedWithOptional = 67,
    CSSPropertyTestMatchAllOrderedWithOptionalAndCustomType = 68,
    CSSPropertyTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt = 69,
    CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequired = 70,
    CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType = 71,
    CSSPropertyTestMatchAllOrderedWithOptionalNoSingleItemOpt = 72,
    CSSPropertyTestMatchAllOrderedWithOptionalSingleItemOpt = 73,
    CSSPropertyTestMatchOne = 74,
    CSSPropertyTestMatchOneOrMoreAnyOrder = 75,
    CSSPropertyTestMatchOneOrMoreAnyOrderNoSingleItemOpt = 76,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomType = 77,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt = 78,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrder = 79,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType = 80,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt = 81,
    CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt = 82,
    CSSPropertyTestMatchOneWithGroupWithSettingsFlag = 83,
    CSSPropertyTestMatchOneWithKeywordWithSettingsFlag = 84,
    CSSPropertyTestMatchOneWithMultipleKeywords = 85,
    CSSPropertyTestMatchOneWithReferenceWithSettingsFlag = 86,
    CSSPropertyTestMatchOneWithSettingsFlag = 87,
    CSSPropertyTestNumericValueRange = 88,
    CSSPropertyTestProperty = 89,
    CSSPropertyTestSettingsOne = 90,
    CSSPropertyTestSharedBuilderExtractorConverter = 91,
    CSSPropertyTestUnboundedRepetitionWithCommasWithMin = 92,
    CSSPropertyTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt = 93,
    CSSPropertyTestUnboundedRepetitionWithCommasWithMinSingleItemOpt = 94,
    CSSPropertyTestUnboundedRepetitionWithSpacesNoMin = 95,
    CSSPropertyTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt = 96,
    CSSPropertyTestUnboundedRepetitionWithSpacesWithMin = 97,
    CSSPropertyTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt = 98,
    CSSPropertyTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt = 99,
    CSSPropertyTestUrlWithModifiers = 100,
    CSSPropertyTestUrlWithNoModifiers = 101,
    CSSPropertyTestUsingSharedRule = 102,
    CSSPropertyTestUsingSharedRuleExported = 103,
    CSSPropertyTestUsingSharedRuleWithOverrideFunction = 104,
    CSSPropertyTestSinkPriority = 105,
    CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal = 106,
    CSSPropertyTestLogicalPropertyGroupPhysicalVertical = 107,
    CSSPropertyTestLogicalPropertyGroupLogicalBlock = 108,
    CSSPropertyTestLogicalPropertyGroupLogicalInline = 109,
    CSSPropertyAll = 110,
    CSSPropertyFont = 111,
    CSSPropertyTestShorthandOne = 112,
    CSSPropertyTestShorthandTwo = 113,
};

// Enum value of the first "real" CSS property, which excludes
// CSSPropertyInvalid and CSSPropertyCustom.
constexpr uint16_t firstCSSProperty = 2;
// Total number of enum values in the CSSPropertyID enum. If making an array
// that can be indexed into using the enum value, use this as the size.
constexpr uint16_t cssPropertyIDEnumValueCount = 114;
// Number of "real" CSS properties. This differs from cssPropertyIDEnumValueCount,
// as this doesn't consider CSSPropertyInvalid and CSSPropertyCustom.
constexpr uint16_t numCSSProperties = 112;
constexpr unsigned maxCSSPropertyNameLength = 114;
constexpr auto firstTopPriorityProperty = CSSPropertyID::CSSPropertyTestTopPriority;
constexpr auto lastTopPriorityProperty = CSSPropertyID::CSSPropertyTestTopPriority;
constexpr auto firstHighPriorityProperty = CSSPropertyID::CSSPropertyTestHighPriority;
constexpr auto lastHighPriorityProperty = CSSPropertyID::CSSPropertyTestHighPriority;
constexpr auto firstMediumPriorityProperty = CSSPropertyID::CSSPropertyBackgroundFillLayerTestPrimary;
constexpr auto lastMediumPriorityProperty = CSSPropertyID::CSSPropertyTestMediumPriority;
constexpr auto firstLowPriorityProperty = CSSPropertyID::CSSPropertyBackgroundFillLayerTestSecondary;
constexpr auto lastLowPriorityProperty = CSSPropertyID::CSSPropertyTestSinkPriority;
constexpr auto firstLogicalGroupPhysicalProperty = CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal;
constexpr auto lastLogicalGroupPhysicalProperty = CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalVertical;
constexpr auto firstLogicalGroupLogicalProperty = CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalBlock;
constexpr auto lastLogicalGroupLogicalProperty = CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalInline;
constexpr auto firstLogicalGroupProperty = firstLogicalGroupPhysicalProperty;
constexpr auto lastLogicalGroupProperty = lastLogicalGroupLogicalProperty;
constexpr auto firstShorthandProperty = CSSPropertyID::CSSPropertyAll;
constexpr auto lastShorthandProperty = CSSPropertyID::CSSPropertyTestShorthandTwo;
constexpr uint16_t numCSSPropertyLonghands = firstShorthandProperty - firstCSSProperty;
extern const std::array<CSSPropertyID, 106> computedPropertyIDs;

struct CSSPropertySettings {
    WTF_DEPRECATED_MAKE_STRUCT_FAST_ALLOCATED(CSSPropertySettings);

    bool cssDescriptorEnabled : 1 { false };
    bool cssSettingsOneEnabled : 1 { false };
    bool cssSettingsShorthandEnabled : 1 { false };

    CSSPropertySettings() = default;
    explicit CSSPropertySettings(const Settings&);
};

bool operator==(const CSSPropertySettings&, const CSSPropertySettings&);
void add(Hasher&, const CSSPropertySettings&);

constexpr bool isLonghand(CSSPropertyID);
bool isInternal(CSSPropertyID);
bool isExposed(CSSPropertyID, const Settings*);
bool isExposed(CSSPropertyID, const Settings&);
bool isExposed(CSSPropertyID, const CSSPropertySettings*);
bool isExposed(CSSPropertyID, const CSSPropertySettings&);

CSSPropertyID findCSSProperty(const char* characters, unsigned length);
ASCIILiteral nameLiteral(CSSPropertyID);
const AtomString& nameString(CSSPropertyID);
String nameForIDL(CSSPropertyID);

CSSPropertyID cascadeAliasProperty(CSSPropertyID);

template<CSSPropertyID first, CSSPropertyID last> struct CSSPropertiesRange {
    struct Iterator {
        uint16_t index { static_cast<uint16_t>(first) };
        constexpr CSSPropertyID operator*() const { return static_cast<CSSPropertyID>(index); }
        constexpr Iterator& operator++() { ++index; return *this; }
        constexpr bool operator==(std::nullptr_t) const { return index > static_cast<uint16_t>(last); }
    };
    static constexpr Iterator begin() { return { }; }
    static constexpr std::nullptr_t end() { return nullptr; }
    static constexpr uint16_t size() { return last - first + 1; }
};
using AllCSSPropertiesRange = CSSPropertiesRange<static_cast<CSSPropertyID>(firstCSSProperty), lastShorthandProperty>;
using AllLonghandCSSPropertiesRange = CSSPropertiesRange<static_cast<CSSPropertyID>(firstCSSProperty), lastLogicalGroupProperty>;
constexpr AllCSSPropertiesRange allCSSProperties() { return { }; }
constexpr AllLonghandCSSPropertiesRange allLonghandCSSProperties() { return { }; }

constexpr bool isLonghand(CSSPropertyID property)
{
    return static_cast<uint16_t>(property) >= firstCSSProperty
        && static_cast<uint16_t>(property) < static_cast<uint16_t>(firstShorthandProperty);
}
constexpr bool isShorthand(CSSPropertyID property)
{
    return static_cast<uint16_t>(property) >= static_cast<uint16_t>(firstShorthandProperty)
        && static_cast<uint16_t>(property) <= static_cast<uint16_t>(lastShorthandProperty);
}

constexpr bool isLogicalPropertyGroupProperty(CSSPropertyID property)
{
    return static_cast<uint16_t>(property) >= static_cast<uint16_t>(firstLogicalGroupPhysicalProperty)
        && static_cast<uint16_t>(property) <= static_cast<uint16_t>(lastLogicalGroupLogicalProperty);
}

constexpr bool isLogicalPropertyGroupPhysicalProperty(CSSPropertyID property)
{
    return static_cast<uint16_t>(property) >= static_cast<uint16_t>(firstLogicalGroupPhysicalProperty)
        && static_cast<uint16_t>(property) <= static_cast<uint16_t>(lastLogicalGroupPhysicalProperty);
}

constexpr bool isLogicalPropertyGroupLogicalProperty(CSSPropertyID property)
{
    return static_cast<uint16_t>(property) >= static_cast<uint16_t>(firstLogicalGroupLogicalProperty)
        && static_cast<uint16_t>(property) <= static_cast<uint16_t>(lastLogicalGroupLogicalProperty);
}

WTF::TextStream& operator<<(WTF::TextStream&, CSSPropertyID);

} // namespace WebCore

namespace WTF {

template<> struct DefaultHash<WebCore::CSSPropertyID> : IntHash<unsigned> { };

template<> struct HashTraits<WebCore::CSSPropertyID> : GenericHashTraits<WebCore::CSSPropertyID> {
    static const bool emptyValueIsZero = true;
    static void constructDeletedValue(WebCore::CSSPropertyID& slot) { slot = static_cast<WebCore::CSSPropertyID>(std::numeric_limits<uint16_t>::max()); }
    static bool isDeletedValue(WebCore::CSSPropertyID value) { return static_cast<uint16_t>(value) == std::numeric_limits<uint16_t>::max(); }
};

} // namespace WTF

namespace std {

template<> struct iterator_traits<WebCore::AllCSSPropertiesRange::Iterator> { using value_type = WebCore::CSSPropertyID; };
template<> struct iterator_traits<WebCore::AllLonghandCSSPropertiesRange::Iterator> { using value_type = WebCore::CSSPropertyID; };

} // namespace std

