// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#include "config.h"
#include "StyleExtractorGenerated.h"

#include "CSSPrimitiveValueMappings.h"
#include "CSSProperty.h"
#include "ColorSerialization.h"
#include "RenderStyle.h"
#include "StyleExtractorConverter.h"
#include "StyleExtractorCustom.h"
#include "StyleExtractorState.h"
#include "StylePropertyShorthand.h"

namespace WebCore {
namespace Style {

class ExtractorFunctions {
public:
    static RefPtr<CSSValue> extractTestTopPriority(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testTopPriority());
    }
    static void extractTestTopPrioritySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testTopPriority());
    }
    static RefPtr<CSSValue> extractTestHighPriority(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testHighPriority());
    }
    static void extractTestHighPrioritySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testHighPriority());
    }
    static RefPtr<CSSValue> extractBackgroundFillLayerTestPrimary(ExtractorState& extractorState)
    {
        auto mapper = [](auto& extractorState, auto& layer) -> Ref<CSSValue> {
            return ExtractorConverter::convert(extractorState, layer.backgroundFillLayerTestPrimary());
        };
        return extractFillLayerValue(extractorState, extractorState.style.backgroundLayers(), mapper);
    }
    static void extractBackgroundFillLayerTestPrimarySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        auto mapper = [](auto& extractorState, StringBuilder& builder, const CSS::SerializationContext& context, bool includeComma, auto& layer) {
            if (includeComma)
                builder.append(", "_s);
            ExtractorSerializer::serialize(extractorState, builder, context, layer.backgroundFillLayerTestPrimary());
        };
        extractFillLayerValueSerialization(extractorState, builder, context, extractorState.style.backgroundLayers(), mapper);
    }
    static RefPtr<CSSValue> extractTestMediumPriority(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMediumPriority());
    }
    static void extractTestMediumPrioritySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMediumPriority());
    }
    static RefPtr<CSSValue> extractBackgroundFillLayerTestSecondary(ExtractorState& extractorState)
    {
        auto mapper = [](auto& extractorState, auto& layer) -> Ref<CSSValue> {
            return ExtractorConverter::convert(extractorState, layer.backgroundFillLayerTestSecondary());
        };
        return extractFillLayerValue(extractorState, extractorState.style.backgroundLayers(), mapper);
    }
    static void extractBackgroundFillLayerTestSecondarySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        auto mapper = [](auto& extractorState, StringBuilder& builder, const CSS::SerializationContext& context, bool includeComma, auto& layer) {
            if (includeComma)
                builder.append(", "_s);
            ExtractorSerializer::serialize(extractorState, builder, context, layer.backgroundFillLayerTestSecondary());
        };
        extractFillLayerValueSerialization(extractorState, builder, context, extractorState.style.backgroundLayers(), mapper);
    }
    static RefPtr<CSSValue> extractBackgroundFillLayerTestSecondaryWithConverter(ExtractorState& extractorState)
    {
        auto mapper = [](auto& extractorState, auto& layer) -> Ref<CSSValue> {
            return ExtractorConverter::convertFillTestConverter(extractorState, layer.backgroundFillLayerTestSecondaryWithConverter());
        };
        return extractFillLayerValue(extractorState, extractorState.style.backgroundLayers(), mapper);
    }
    static void extractBackgroundFillLayerTestSecondaryWithConverterSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        auto mapper = [](auto& extractorState, StringBuilder& builder, const CSS::SerializationContext& context, bool includeComma, auto& layer) {
            if (includeComma)
                builder.append(", "_s);
            ExtractorSerializer::serializeFillTestConverter(extractorState, builder, context, layer.backgroundFillLayerTestSecondaryWithConverter());
        };
        extractFillLayerValueSerialization(extractorState, builder, context, extractorState.style.backgroundLayers(), mapper);
    }
    static RefPtr<CSSValue> extractTestAnimationWrapper(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testAnimationWrapper());
    }
    static void extractTestAnimationWrapperSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testAnimationWrapper());
    }
    static RefPtr<CSSValue> extractTestAnimationWrapperAccelerationAlways(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testAnimationWrapperAccelerationAlways());
    }
    static void extractTestAnimationWrapperAccelerationAlwaysSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testAnimationWrapperAccelerationAlways());
    }
    static RefPtr<CSSValue> extractTestAnimationWrapperAccelerationThreadedOnly(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testAnimationWrapperAccelerationThreadedOnly());
    }
    static void extractTestAnimationWrapperAccelerationThreadedOnlySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testAnimationWrapperAccelerationThreadedOnly());
    }
    static RefPtr<CSSValue> extractTestAutoFunctions(ExtractorState& extractorState)
    {
        if (extractorState.style.hasAutoTestAutoFunctions())
            return CSSPrimitiveValue::create(CSSValueAuto);
        return ExtractorConverter::convert(extractorState, extractorState.style.testAutoFunctions());
    }
    static void extractTestAutoFunctionsSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        if (extractorState.style.hasAutoTestAutoFunctions()) {
            builder.append(nameLiteralForSerialization(CSSValueAuto));
            return;
        }
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testAutoFunctions());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithCommas(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommas());
    }
    static void extractTestBoundedRepetitionWithCommasSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithCommas());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithCommasFixed(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommasFixed());
    }
    static void extractTestBoundedRepetitionWithCommasFixedSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithCommasFixed());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithCommasNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommasNoSingleItemOpt());
    }
    static void extractTestBoundedRepetitionWithCommasNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithCommasNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithCommasSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithCommasSingleItemOpt());
    }
    static void extractTestBoundedRepetitionWithCommasSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithCommasSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpaces(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpaces());
    }
    static void extractTestBoundedRepetitionWithSpacesSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpaces());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpacesFixed(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesFixed());
    }
    static void extractTestBoundedRepetitionWithSpacesFixedSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpacesFixed());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpacesNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesNoSingleItemOpt());
    }
    static void extractTestBoundedRepetitionWithSpacesNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpacesNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpacesSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesSingleItemOpt());
    }
    static void extractTestBoundedRepetitionWithSpacesSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpacesSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpacesWithType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithType());
    }
    static void extractTestBoundedRepetitionWithSpacesWithTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpacesWithType());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt());
    }
    static void extractTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious());
    }
    static void extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious());
    }
    static RefPtr<CSSValue> extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo());
    }
    static void extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwoSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo());
    }
    static RefPtr<CSSValue> extractTestColor(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertStyleType<Color>(extractorState, extractorState.style.testColor());
    }
    static void extractTestColorSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serializeStyleType<Color>(extractorState, builder, context, extractorState.style.testColor());
    }
    static RefPtr<CSSValue> extractTestColorAllowsTypesAbsolute(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertStyleType<Color>(extractorState, extractorState.style.testColorAllowsTypesAbsolute());
    }
    static void extractTestColorAllowsTypesAbsoluteSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serializeStyleType<Color>(extractorState, builder, context, extractorState.style.testColorAllowsTypesAbsolute());
    }
    static RefPtr<CSSValue> extractTestColorPropertyWithNoVisitedLinkSupport(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertStyleType<Color>(extractorState, extractorState.style.testColorPropertyWithNoVisitedLinkSupport());
    }
    static void extractTestColorPropertyWithNoVisitedLinkSupportSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serializeStyleType<Color>(extractorState, builder, context, extractorState.style.testColorPropertyWithNoVisitedLinkSupport());
    }
    static RefPtr<CSSValue> extractTestColorPropertyWithVisitedLinkSupport(ExtractorState& extractorState)
    {
        if (extractorState.allowVisitedStyle) {
            return extractorState.pool.createColorValue(extractorState.style.visitedDependentColor(CSSPropertyID::CSSPropertyTestColorPropertyWithVisitedLinkSupport));
        }
        return ExtractorConverter::convertStyleType<Color>(extractorState, extractorState.style.testColorPropertyWithVisitedLinkSupport());
    }
    static void extractTestColorPropertyWithVisitedLinkSupportSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        if (extractorState.allowVisitedStyle) {
            builder.append(WebCore::serializationForCSS(extractorState.style.visitedDependentColor(CSSPropertyID::CSSPropertyTestColorPropertyWithVisitedLinkSupport)));
            return;
        }
        ExtractorSerializer::serializeStyleType<Color>(extractorState, builder, context, extractorState.style.testColorPropertyWithVisitedLinkSupport());
    }
    static RefPtr<CSSValue> extractTestExtractorConverter(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertTestExtractorOnlyConversion(extractorState, extractorState.style.testExtractorConverter());
    }
    static void extractTestExtractorConverterSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serializeTestExtractorOnlyConversion(extractorState, builder, context, extractorState.style.testExtractorConverter());
    }
    static RefPtr<CSSValue> extractTestFunctionBoundedParameters(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionBoundedParameters());
    }
    static void extractTestFunctionBoundedParametersSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionBoundedParameters());
    }
    static RefPtr<CSSValue> extractTestFunctionFixedParameters(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionFixedParameters());
    }
    static void extractTestFunctionFixedParametersSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionFixedParameters());
    }
    static RefPtr<CSSValue> extractTestFunctionNoParameters(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionNoParameters());
    }
    static void extractTestFunctionNoParametersSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionNoParameters());
    }
    static RefPtr<CSSValue> extractTestFunctionParametersMatchAllAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllAnyOrder());
    }
    static void extractTestFunctionParametersMatchAllAnyOrderSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionParametersMatchAllAnyOrder());
    }
    static RefPtr<CSSValue> extractTestFunctionParametersMatchAllAnyOrderWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllAnyOrderWithOptional());
    }
    static void extractTestFunctionParametersMatchAllAnyOrderWithOptionalSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionParametersMatchAllAnyOrderWithOptional());
    }
    static RefPtr<CSSValue> extractTestFunctionParametersMatchAllOrdered(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllOrdered());
    }
    static void extractTestFunctionParametersMatchAllOrderedSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionParametersMatchAllOrdered());
    }
    static RefPtr<CSSValue> extractTestFunctionParametersMatchAllOrderedWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchAllOrderedWithOptional());
    }
    static void extractTestFunctionParametersMatchAllOrderedWithOptionalSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionParametersMatchAllOrderedWithOptional());
    }
    static RefPtr<CSSValue> extractTestFunctionParametersMatchOneOrMoreAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionParametersMatchOneOrMoreAnyOrder());
    }
    static void extractTestFunctionParametersMatchOneOrMoreAnyOrderSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionParametersMatchOneOrMoreAnyOrder());
    }
    static RefPtr<CSSValue> extractTestFunctionSingleParameter(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionSingleParameter());
    }
    static void extractTestFunctionSingleParameterSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionSingleParameter());
    }
    static RefPtr<CSSValue> extractTestFunctionSingleParameterMatchOne(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionSingleParameterMatchOne());
    }
    static void extractTestFunctionSingleParameterMatchOneSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionSingleParameterMatchOne());
    }
    static RefPtr<CSSValue> extractTestFunctionSingleParameterOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionSingleParameterOptional());
    }
    static void extractTestFunctionSingleParameterOptionalSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionSingleParameterOptional());
    }
    static RefPtr<CSSValue> extractTestFunctionUnboundedParametersNoMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionUnboundedParametersNoMin());
    }
    static void extractTestFunctionUnboundedParametersNoMinSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionUnboundedParametersNoMin());
    }
    static RefPtr<CSSValue> extractTestFunctionUnboundedParametersWithMinimum(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testFunctionUnboundedParametersWithMinimum());
    }
    static void extractTestFunctionUnboundedParametersWithMinimumSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testFunctionUnboundedParametersWithMinimum());
    }
    static RefPtr<CSSValue> extractTestImage(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testImage());
    }
    static void extractTestImageSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testImage());
    }
    static RefPtr<CSSValue> extractTestImageNoImageSet(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testImageNoImageSet());
    }
    static void extractTestImageNoImageSetSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testImageNoImageSet());
    }
    static RefPtr<CSSValue> extractTestKeyword(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testKeyword());
    }
    static void extractTestKeywordSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testKeyword());
    }
    static RefPtr<CSSValue> extractTestKeywordWithAliasedTo(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testKeywordWithAliasedTo());
    }
    static void extractTestKeywordWithAliasedToSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testKeywordWithAliasedTo());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrder());
    }
    static void extractTestMatchAllAnyOrderSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrder());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithCustomType());
    }
    static void extractTestMatchAllAnyOrderWithCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptional());
    }
    static void extractTestMatchAllAnyOrderWithOptionalSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptional());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndCustomType());
    }
    static void extractTestMatchAllAnyOrderWithOptionalAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType());
    }
    static void extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt());
    }
    static void extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType());
    }
    static void extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt());
    }
    static void extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType());
    }
    static void extractTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalNoSingleItemOpt());
    }
    static void extractTestMatchAllAnyOrderWithOptionalNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalSingleItemOpt());
    }
    static void extractTestMatchAllAnyOrderWithOptionalSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalWithPreserveOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalWithPreserveOrder());
    }
    static void extractTestMatchAllAnyOrderWithOptionalWithPreserveOrderSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalWithPreserveOrder());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt());
    }
    static void extractTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithPreserveOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithPreserveOrder());
    }
    static void extractTestMatchAllAnyOrderWithPreserveOrderSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithPreserveOrder());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithPreserveOrderAndCustomType());
    }
    static void extractTestMatchAllAnyOrderWithPreserveOrderAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt());
    }
    static void extractTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrdered(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrdered());
    }
    static void extractTestMatchAllOrderedSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrdered());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithCustomType());
    }
    static void extractTestMatchAllOrderedWithCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithOptional(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptional());
    }
    static void extractTestMatchAllOrderedWithOptionalSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithOptional());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithOptionalAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndCustomType());
    }
    static void extractTestMatchAllOrderedWithOptionalAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithOptionalAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt());
    }
    static void extractTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithOptionalAndMultipleRequired(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndMultipleRequired());
    }
    static void extractTestMatchAllOrderedWithOptionalAndMultipleRequiredSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithOptionalAndMultipleRequired());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType());
    }
    static void extractTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithOptionalNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalNoSingleItemOpt());
    }
    static void extractTestMatchAllOrderedWithOptionalNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithOptionalNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchAllOrderedWithOptionalSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchAllOrderedWithOptionalSingleItemOpt());
    }
    static void extractTestMatchAllOrderedWithOptionalSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchAllOrderedWithOptionalSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchOne(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOne());
    }
    static void extractTestMatchOneSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOne());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrder());
    }
    static void extractTestMatchOneOrMoreAnyOrderSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrder());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderNoSingleItemOpt());
    }
    static void extractTestMatchOneOrMoreAnyOrderNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrderWithCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithCustomType());
    }
    static void extractTestMatchOneOrMoreAnyOrderWithCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrderWithCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt());
    }
    static void extractTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrderWithPreserveOrder(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrder());
    }
    static void extractTestMatchOneOrMoreAnyOrderWithPreserveOrderSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrder());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType());
    }
    static void extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt());
    }
    static void extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt());
    }
    static void extractTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestMatchOneWithGroupWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithGroupWithSettingsFlag());
    }
    static void extractTestMatchOneWithGroupWithSettingsFlagSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneWithGroupWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractTestMatchOneWithKeywordWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithKeywordWithSettingsFlag());
    }
    static void extractTestMatchOneWithKeywordWithSettingsFlagSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneWithKeywordWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractTestMatchOneWithMultipleKeywords(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithMultipleKeywords());
    }
    static void extractTestMatchOneWithMultipleKeywordsSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneWithMultipleKeywords());
    }
    static RefPtr<CSSValue> extractTestMatchOneWithReferenceWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithReferenceWithSettingsFlag());
    }
    static void extractTestMatchOneWithReferenceWithSettingsFlagSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneWithReferenceWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractTestMatchOneWithSettingsFlag(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testMatchOneWithSettingsFlag());
    }
    static void extractTestMatchOneWithSettingsFlagSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testMatchOneWithSettingsFlag());
    }
    static RefPtr<CSSValue> extractTestNumericValueRange(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testNumericValueRange());
    }
    static void extractTestNumericValueRangeSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testNumericValueRange());
    }
    static RefPtr<CSSValue> extractTestProperty(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testProperty());
    }
    static void extractTestPropertySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testProperty());
    }
    static RefPtr<CSSValue> extractTestSettingsOne(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testSettingsOne());
    }
    static void extractTestSettingsOneSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testSettingsOne());
    }
    static RefPtr<CSSValue> extractTestSharedBuilderExtractorConverter(ExtractorState& extractorState)
    {
        return ExtractorConverter::convertTestSharedBuilderExtractorConversion(extractorState, extractorState.style.testSharedBuilderExtractorConverter());
    }
    static void extractTestSharedBuilderExtractorConverterSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serializeTestSharedBuilderExtractorConversion(extractorState, builder, context, extractorState.style.testSharedBuilderExtractorConverter());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithCommasWithMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithCommasWithMin());
    }
    static void extractTestUnboundedRepetitionWithCommasWithMinSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithCommasWithMin());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithCommasWithMinNoSingleItemOpt());
    }
    static void extractTestUnboundedRepetitionWithCommasWithMinNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithCommasWithMinNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithCommasWithMinSingleItemOpt());
    }
    static void extractTestUnboundedRepetitionWithCommasWithMinSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithCommasWithMinSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithSpacesNoMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesNoMin());
    }
    static void extractTestUnboundedRepetitionWithSpacesNoMinSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithSpacesNoMin());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt());
    }
    static void extractTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithSpacesWithMin(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesWithMin());
    }
    static void extractTestUnboundedRepetitionWithSpacesWithMinSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithSpacesWithMin());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt());
    }
    static void extractTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUnboundedRepetitionWithSpacesWithMinSingleItemOpt());
    }
    static void extractTestUnboundedRepetitionWithSpacesWithMinSingleItemOptSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUnboundedRepetitionWithSpacesWithMinSingleItemOpt());
    }
    static RefPtr<CSSValue> extractTestUrlWithModifiers(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUrlWithModifiers());
    }
    static void extractTestUrlWithModifiersSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUrlWithModifiers());
    }
    static RefPtr<CSSValue> extractTestUrlWithNoModifiers(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUrlWithNoModifiers());
    }
    static void extractTestUrlWithNoModifiersSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUrlWithNoModifiers());
    }
    static RefPtr<CSSValue> extractTestUsingSharedRule(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUsingSharedRule());
    }
    static void extractTestUsingSharedRuleSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUsingSharedRule());
    }
    static RefPtr<CSSValue> extractTestUsingSharedRuleExported(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUsingSharedRuleExported());
    }
    static void extractTestUsingSharedRuleExportedSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUsingSharedRuleExported());
    }
    static RefPtr<CSSValue> extractTestUsingSharedRuleWithOverrideFunction(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testUsingSharedRuleWithOverrideFunction());
    }
    static void extractTestUsingSharedRuleWithOverrideFunctionSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testUsingSharedRuleWithOverrideFunction());
    }
    static RefPtr<CSSValue> extractTestSinkPriority(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testSinkPriority());
    }
    static void extractTestSinkPrioritySerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testSinkPriority());
    }
    static RefPtr<CSSValue> extractTestLogicalPropertyGroupPhysicalHorizontal(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testLogicalPropertyGroupPhysicalHorizontal());
    }
    static void extractTestLogicalPropertyGroupPhysicalHorizontalSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testLogicalPropertyGroupPhysicalHorizontal());
    }
    static RefPtr<CSSValue> extractTestLogicalPropertyGroupPhysicalVertical(ExtractorState& extractorState)
    {
        return ExtractorConverter::convert(extractorState, extractorState.style.testLogicalPropertyGroupPhysicalVertical());
    }
    static void extractTestLogicalPropertyGroupPhysicalVerticalSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        ExtractorSerializer::serialize(extractorState, builder, context, extractorState.style.testLogicalPropertyGroupPhysicalVertical());
    }
    static RefPtr<CSSValue> extractTestShorthandTwoShorthand(ExtractorState& extractorState)
    {
        return extractCoalescingPairShorthand(extractorState, testShorthandTwoShorthand());
    }
    static void extractTestShorthandTwoShorthandSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context)
    {
        extractCoalescingPairShorthandSerialization(extractorState, builder, context, testShorthandTwoShorthand());
    }
};

RefPtr<CSSValue> ExtractorGenerated::extractValue(ExtractorState& extractorState, CSSPropertyID id)
{
    switch (id) {
    case CSSPropertyID::CSSPropertyInvalid:
        break;
    case CSSPropertyID::CSSPropertyCustom:
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestTopPriority:
        return ExtractorFunctions::extractTestTopPriority(extractorState);
    case CSSPropertyID::CSSPropertyTestHighPriority:
        return ExtractorFunctions::extractTestHighPriority(extractorState);
    case CSSPropertyID::CSSPropertyBackgroundFillLayerTestPrimary:
        return ExtractorFunctions::extractBackgroundFillLayerTestPrimary(extractorState);
    case CSSPropertyID::CSSPropertyTestMediumPriority:
        return ExtractorFunctions::extractTestMediumPriority(extractorState);
    case CSSPropertyID::CSSPropertyBackgroundFillLayerTestSecondary:
        return ExtractorFunctions::extractBackgroundFillLayerTestSecondary(extractorState);
    case CSSPropertyID::CSSPropertyBackgroundFillLayerTestSecondaryWithConverter:
        return ExtractorFunctions::extractBackgroundFillLayerTestSecondaryWithConverter(extractorState);
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForFirstDescriptor:
        // Skipped - Descriptor-only property
        return nullptr;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForSecondDescriptor:
        // Skipped - Descriptor-only property
        return nullptr;
    case CSSPropertyID::CSSPropertyTestAnimationWrapper:
        return ExtractorFunctions::extractTestAnimationWrapper(extractorState);
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationAlways:
        return ExtractorFunctions::extractTestAnimationWrapperAccelerationAlways(extractorState);
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationThreadedOnly:
        return ExtractorFunctions::extractTestAnimationWrapperAccelerationThreadedOnly(extractorState);
    case CSSPropertyID::CSSPropertyTestAutoFunctions:
        return ExtractorFunctions::extractTestAutoFunctions(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommas:
        return ExtractorFunctions::extractTestBoundedRepetitionWithCommas(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasFixed:
        return ExtractorFunctions::extractTestBoundedRepetitionWithCommasFixed(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasNoSingleItemOpt:
        return ExtractorFunctions::extractTestBoundedRepetitionWithCommasNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasSingleItemOpt:
        return ExtractorFunctions::extractTestBoundedRepetitionWithCommasSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpaces:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpaces(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesFixed:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpacesFixed(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesNoSingleItemOpt:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpacesNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesSingleItemOpt:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpacesSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithType:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithType(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious(extractorState);
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo:
        return ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo(extractorState);
    case CSSPropertyID::CSSPropertyTestColor:
        return ExtractorFunctions::extractTestColor(extractorState);
    case CSSPropertyID::CSSPropertyTestColorAllowsTypesAbsolute:
        return ExtractorFunctions::extractTestColorAllowsTypesAbsolute(extractorState);
    case CSSPropertyID::CSSPropertyTestColorPropertyWithNoVisitedLinkSupport:
        return ExtractorFunctions::extractTestColorPropertyWithNoVisitedLinkSupport(extractorState);
    case CSSPropertyID::CSSPropertyTestColorPropertyWithVisitedLinkSupport:
        return ExtractorFunctions::extractTestColorPropertyWithVisitedLinkSupport(extractorState);
    case CSSPropertyID::CSSPropertyTestCustomExtractor:
        return ExtractorCustom::extractTestCustomExtractor(extractorState);
    case CSSPropertyID::CSSPropertyTestExtractorConverter:
        return ExtractorFunctions::extractTestExtractorConverter(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionBoundedParameters:
        return ExtractorFunctions::extractTestFunctionBoundedParameters(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionFixedParameters:
        return ExtractorFunctions::extractTestFunctionFixedParameters(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionNoParameters:
        return ExtractorFunctions::extractTestFunctionNoParameters(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllAnyOrder:
        return ExtractorFunctions::extractTestFunctionParametersMatchAllAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllAnyOrderWithOptional:
        return ExtractorFunctions::extractTestFunctionParametersMatchAllAnyOrderWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllOrdered:
        return ExtractorFunctions::extractTestFunctionParametersMatchAllOrdered(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllOrderedWithOptional:
        return ExtractorFunctions::extractTestFunctionParametersMatchAllOrderedWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchOneOrMoreAnyOrder:
        return ExtractorFunctions::extractTestFunctionParametersMatchOneOrMoreAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameter:
        return ExtractorFunctions::extractTestFunctionSingleParameter(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameterMatchOne:
        return ExtractorFunctions::extractTestFunctionSingleParameterMatchOne(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameterOptional:
        return ExtractorFunctions::extractTestFunctionSingleParameterOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionUnboundedParametersNoMin:
        return ExtractorFunctions::extractTestFunctionUnboundedParametersNoMin(extractorState);
    case CSSPropertyID::CSSPropertyTestFunctionUnboundedParametersWithMinimum:
        return ExtractorFunctions::extractTestFunctionUnboundedParametersWithMinimum(extractorState);
    case CSSPropertyID::CSSPropertyTestImage:
        return ExtractorFunctions::extractTestImage(extractorState);
    case CSSPropertyID::CSSPropertyTestImageNoImageSet:
        return ExtractorFunctions::extractTestImageNoImageSet(extractorState);
    case CSSPropertyID::CSSPropertyTestKeyword:
        return ExtractorFunctions::extractTestKeyword(extractorState);
    case CSSPropertyID::CSSPropertyTestKeywordWithAliasedTo:
        return ExtractorFunctions::extractTestKeywordWithAliasedTo(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrder:
        return ExtractorFunctions::extractTestMatchAllAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithCustomType:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptional:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndCustomType:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrder:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalWithPreserveOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrder:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithPreserveOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrderAndCustomType:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrdered:
        return ExtractorFunctions::extractTestMatchAllOrdered(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithCustomType:
        return ExtractorFunctions::extractTestMatchAllOrderedWithCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptional:
        return ExtractorFunctions::extractTestMatchAllOrderedWithOptional(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndCustomType:
        return ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequired:
        return ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndMultipleRequired(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType:
        return ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllOrderedWithOptionalNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalSingleItemOpt:
        return ExtractorFunctions::extractTestMatchAllOrderedWithOptionalSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOne:
        return ExtractorFunctions::extractTestMatchOne(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrder:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomType:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrder:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrder(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt:
        return ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithGroupWithSettingsFlag:
        return ExtractorFunctions::extractTestMatchOneWithGroupWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithKeywordWithSettingsFlag:
        return ExtractorFunctions::extractTestMatchOneWithKeywordWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithMultipleKeywords:
        return ExtractorFunctions::extractTestMatchOneWithMultipleKeywords(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithReferenceWithSettingsFlag:
        return ExtractorFunctions::extractTestMatchOneWithReferenceWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestMatchOneWithSettingsFlag:
        return ExtractorFunctions::extractTestMatchOneWithSettingsFlag(extractorState);
    case CSSPropertyID::CSSPropertyTestNumericValueRange:
        return ExtractorFunctions::extractTestNumericValueRange(extractorState);
    case CSSPropertyID::CSSPropertyTestProperty:
        return ExtractorFunctions::extractTestProperty(extractorState);
    case CSSPropertyID::CSSPropertyTestSettingsOne:
        return ExtractorFunctions::extractTestSettingsOne(extractorState);
    case CSSPropertyID::CSSPropertyTestSharedBuilderExtractorConverter:
        return ExtractorFunctions::extractTestSharedBuilderExtractorConverter(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMin:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithCommasWithMin(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinSingleItemOpt:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithCommasWithMinSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMin:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesNoMin(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMin:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesWithMin(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt:
        return ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt(extractorState);
    case CSSPropertyID::CSSPropertyTestUrlWithModifiers:
        return ExtractorFunctions::extractTestUrlWithModifiers(extractorState);
    case CSSPropertyID::CSSPropertyTestUrlWithNoModifiers:
        return ExtractorFunctions::extractTestUrlWithNoModifiers(extractorState);
    case CSSPropertyID::CSSPropertyTestUsingSharedRule:
        return ExtractorFunctions::extractTestUsingSharedRule(extractorState);
    case CSSPropertyID::CSSPropertyTestUsingSharedRuleExported:
        return ExtractorFunctions::extractTestUsingSharedRuleExported(extractorState);
    case CSSPropertyID::CSSPropertyTestUsingSharedRuleWithOverrideFunction:
        return ExtractorFunctions::extractTestUsingSharedRuleWithOverrideFunction(extractorState);
    case CSSPropertyID::CSSPropertyTestSinkPriority:
        return ExtractorFunctions::extractTestSinkPriority(extractorState);
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal:
        return ExtractorFunctions::extractTestLogicalPropertyGroupPhysicalHorizontal(extractorState);
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalVertical:
        return ExtractorFunctions::extractTestLogicalPropertyGroupPhysicalVertical(extractorState);
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalBlock:
        // Logical properties are handled by recursing using the direction resolved property.
        return extractValue(extractorState, CSSProperty::resolveDirectionAwareProperty(id, extractorState.style.writingMode()));
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalInline:
        // Logical properties are handled by recursing using the direction resolved property.
        return extractValue(extractorState, CSSProperty::resolveDirectionAwareProperty(id, extractorState.style.writingMode()));
    case CSSPropertyID::CSSPropertyAll:
        // Skipped - Not computable
        return nullptr;
    case CSSPropertyID::CSSPropertyFont:
        ASSERT(isShorthand(id));
        return ExtractorCustom::extractFontShorthand(extractorState);
    case CSSPropertyID::CSSPropertyTestShorthandOne:
        ASSERT(isShorthand(id));
        return ExtractorCustom::extractTestShorthandOneShorthand(extractorState);
    case CSSPropertyID::CSSPropertyTestShorthandTwo:
        ASSERT(isShorthand(id));
        return ExtractorFunctions::extractTestShorthandTwoShorthand(extractorState);
    }
    ASSERT_NOT_REACHED();
    return nullptr;
}


void ExtractorGenerated::extractValueSerialization(ExtractorState& extractorState, StringBuilder& builder, const CSS::SerializationContext& context, CSSPropertyID id)
{
    switch (id) {
    case CSSPropertyID::CSSPropertyInvalid:
        break;
    case CSSPropertyID::CSSPropertyCustom:
        ASSERT_NOT_REACHED();
        break;
    case CSSPropertyID::CSSPropertyTestTopPriority:
        ExtractorFunctions::extractTestTopPrioritySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestHighPriority:
        ExtractorFunctions::extractTestHighPrioritySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyBackgroundFillLayerTestPrimary:
        ExtractorFunctions::extractBackgroundFillLayerTestPrimarySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMediumPriority:
        ExtractorFunctions::extractTestMediumPrioritySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyBackgroundFillLayerTestSecondary:
        ExtractorFunctions::extractBackgroundFillLayerTestSecondarySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyBackgroundFillLayerTestSecondaryWithConverter:
        ExtractorFunctions::extractBackgroundFillLayerTestSecondaryWithConverterSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForFirstDescriptor:
        // Skipped - Descriptor-only property
        return;
    case CSSPropertyID::CSSPropertyFirstTestDescriptorForSecondDescriptor:
        // Skipped - Descriptor-only property
        return;
    case CSSPropertyID::CSSPropertyTestAnimationWrapper:
        ExtractorFunctions::extractTestAnimationWrapperSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationAlways:
        ExtractorFunctions::extractTestAnimationWrapperAccelerationAlwaysSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestAnimationWrapperAccelerationThreadedOnly:
        ExtractorFunctions::extractTestAnimationWrapperAccelerationThreadedOnlySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestAutoFunctions:
        ExtractorFunctions::extractTestAutoFunctionsSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommas:
        ExtractorFunctions::extractTestBoundedRepetitionWithCommasSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasFixed:
        ExtractorFunctions::extractTestBoundedRepetitionWithCommasFixedSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasNoSingleItemOpt:
        ExtractorFunctions::extractTestBoundedRepetitionWithCommasNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithCommasSingleItemOpt:
        ExtractorFunctions::extractTestBoundedRepetitionWithCommasSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpaces:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesFixed:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesFixedSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesNoSingleItemOpt:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesSingleItemOpt:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithType:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOpt:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithTypeNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPrevious:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwo:
        ExtractorFunctions::extractTestBoundedRepetitionWithSpacesWithTypeWithDefaultPreviousTwoSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestColor:
        ExtractorFunctions::extractTestColorSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestColorAllowsTypesAbsolute:
        ExtractorFunctions::extractTestColorAllowsTypesAbsoluteSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestColorPropertyWithNoVisitedLinkSupport:
        ExtractorFunctions::extractTestColorPropertyWithNoVisitedLinkSupportSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestColorPropertyWithVisitedLinkSupport:
        ExtractorFunctions::extractTestColorPropertyWithVisitedLinkSupportSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestCustomExtractor:
        ExtractorCustom::extractTestCustomExtractorSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestExtractorConverter:
        ExtractorFunctions::extractTestExtractorConverterSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionBoundedParameters:
        ExtractorFunctions::extractTestFunctionBoundedParametersSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionFixedParameters:
        ExtractorFunctions::extractTestFunctionFixedParametersSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionNoParameters:
        ExtractorFunctions::extractTestFunctionNoParametersSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllAnyOrder:
        ExtractorFunctions::extractTestFunctionParametersMatchAllAnyOrderSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllAnyOrderWithOptional:
        ExtractorFunctions::extractTestFunctionParametersMatchAllAnyOrderWithOptionalSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllOrdered:
        ExtractorFunctions::extractTestFunctionParametersMatchAllOrderedSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchAllOrderedWithOptional:
        ExtractorFunctions::extractTestFunctionParametersMatchAllOrderedWithOptionalSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionParametersMatchOneOrMoreAnyOrder:
        ExtractorFunctions::extractTestFunctionParametersMatchOneOrMoreAnyOrderSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameter:
        ExtractorFunctions::extractTestFunctionSingleParameterSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameterMatchOne:
        ExtractorFunctions::extractTestFunctionSingleParameterMatchOneSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionSingleParameterOptional:
        ExtractorFunctions::extractTestFunctionSingleParameterOptionalSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionUnboundedParametersNoMin:
        ExtractorFunctions::extractTestFunctionUnboundedParametersNoMinSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestFunctionUnboundedParametersWithMinimum:
        ExtractorFunctions::extractTestFunctionUnboundedParametersWithMinimumSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestImage:
        ExtractorFunctions::extractTestImageSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestImageNoImageSet:
        ExtractorFunctions::extractTestImageNoImageSetSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestKeyword:
        ExtractorFunctions::extractTestKeywordSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestKeywordWithAliasedTo:
        ExtractorFunctions::extractTestKeywordWithAliasedToSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrder:
        ExtractorFunctions::extractTestMatchAllAnyOrderSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithCustomType:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptional:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndCustomType:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomType:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndCustomTypeNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomType:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndMultipleRequiredAndPreserveOrderAndCustomTypeNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomType:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalAndPreserveOrderAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrder:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalWithPreserveOrderSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithOptionalWithPreserveOrderNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrder:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithPreserveOrderSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrderAndCustomType:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithPreserveOrderAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllAnyOrderWithPreserveOrderNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrdered:
        ExtractorFunctions::extractTestMatchAllOrderedSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithCustomType:
        ExtractorFunctions::extractTestMatchAllOrderedWithCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptional:
        ExtractorFunctions::extractTestMatchAllOrderedWithOptionalSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndCustomType:
        ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndCustomTypeAndNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequired:
        ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndMultipleRequiredSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomType:
        ExtractorFunctions::extractTestMatchAllOrderedWithOptionalAndMultipleRequiredAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllOrderedWithOptionalNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchAllOrderedWithOptionalSingleItemOpt:
        ExtractorFunctions::extractTestMatchAllOrderedWithOptionalSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOne:
        ExtractorFunctions::extractTestMatchOneSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrder:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomType:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithCustomTypeNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrder:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrderSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomType:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrderAndCustomTypeNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOpt:
        ExtractorFunctions::extractTestMatchOneOrMoreAnyOrderWithPreserveOrderNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneWithGroupWithSettingsFlag:
        ExtractorFunctions::extractTestMatchOneWithGroupWithSettingsFlagSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneWithKeywordWithSettingsFlag:
        ExtractorFunctions::extractTestMatchOneWithKeywordWithSettingsFlagSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneWithMultipleKeywords:
        ExtractorFunctions::extractTestMatchOneWithMultipleKeywordsSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneWithReferenceWithSettingsFlag:
        ExtractorFunctions::extractTestMatchOneWithReferenceWithSettingsFlagSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestMatchOneWithSettingsFlag:
        ExtractorFunctions::extractTestMatchOneWithSettingsFlagSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestNumericValueRange:
        ExtractorFunctions::extractTestNumericValueRangeSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestProperty:
        ExtractorFunctions::extractTestPropertySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestSettingsOne:
        ExtractorFunctions::extractTestSettingsOneSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestSharedBuilderExtractorConverter:
        ExtractorFunctions::extractTestSharedBuilderExtractorConverterSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMin:
        ExtractorFunctions::extractTestUnboundedRepetitionWithCommasWithMinSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinNoSingleItemOpt:
        ExtractorFunctions::extractTestUnboundedRepetitionWithCommasWithMinNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithCommasWithMinSingleItemOpt:
        ExtractorFunctions::extractTestUnboundedRepetitionWithCommasWithMinSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMin:
        ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesNoMinSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOpt:
        ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesNoMinNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMin:
        ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesWithMinSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOpt:
        ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesWithMinNoSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUnboundedRepetitionWithSpacesWithMinSingleItemOpt:
        ExtractorFunctions::extractTestUnboundedRepetitionWithSpacesWithMinSingleItemOptSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUrlWithModifiers:
        ExtractorFunctions::extractTestUrlWithModifiersSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUrlWithNoModifiers:
        ExtractorFunctions::extractTestUrlWithNoModifiersSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUsingSharedRule:
        ExtractorFunctions::extractTestUsingSharedRuleSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUsingSharedRuleExported:
        ExtractorFunctions::extractTestUsingSharedRuleExportedSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestUsingSharedRuleWithOverrideFunction:
        ExtractorFunctions::extractTestUsingSharedRuleWithOverrideFunctionSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestSinkPriority:
        ExtractorFunctions::extractTestSinkPrioritySerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalHorizontal:
        ExtractorFunctions::extractTestLogicalPropertyGroupPhysicalHorizontalSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupPhysicalVertical:
        ExtractorFunctions::extractTestLogicalPropertyGroupPhysicalVerticalSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalBlock:
        // Logical properties are handled by recursing using the direction resolved property.
        extractValueSerialization(extractorState, builder, context, CSSProperty::resolveDirectionAwareProperty(id, extractorState.style.writingMode()));
        return;
    case CSSPropertyID::CSSPropertyTestLogicalPropertyGroupLogicalInline:
        // Logical properties are handled by recursing using the direction resolved property.
        extractValueSerialization(extractorState, builder, context, CSSProperty::resolveDirectionAwareProperty(id, extractorState.style.writingMode()));
        return;
    case CSSPropertyID::CSSPropertyAll:
        // Skipped - Not computable
        return;
    case CSSPropertyID::CSSPropertyFont:
        ASSERT(isShorthand(id));
        ExtractorCustom::extractFontShorthandSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestShorthandOne:
        ASSERT(isShorthand(id));
        ExtractorCustom::extractTestShorthandOneShorthandSerialization(extractorState, builder, context);
        return;
    case CSSPropertyID::CSSPropertyTestShorthandTwo:
        ASSERT(isShorthand(id));
        ExtractorFunctions::extractTestShorthandTwoShorthandSerialization(extractorState, builder, context);
        return;
    }
    ASSERT_NOT_REACHED();
}

} // namespace WebCore
} // namespace Style

