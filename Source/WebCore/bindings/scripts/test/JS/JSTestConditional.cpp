/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTestConditional.h"

#include "ActiveDOMObject.h"
#include "ContextDestructionObserverInlines.h"
#include "ExtendedDOMClientIsoSubspaces.h"
#include "ExtendedDOMIsoSubspaces.h"
#include "JSDOMAttribute.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructorNotConstructable.h"
#include "JSDOMExceptionHandling.h"
#include "JSDOMGlobalObjectInlines.h"
#include "JSDOMWrapperCache.h"
#include "ScriptExecutionContext.h"
#include "WebCoreJSClientData.h"
#include <JavaScriptCore/FunctionPrototype.h>
#include <JavaScriptCore/HeapAnalyzer.h>
#include <JavaScriptCore/JSCInlines.h>
#include <JavaScriptCore/JSDestructibleObjectHeapCellType.h>
#include <JavaScriptCore/SlotVisitorMacros.h>
#include <JavaScriptCore/SubspaceInlines.h>
#include <wtf/GetPtr.h>
#include <wtf/PointerPreparations.h>
#include <wtf/URL.h>
#include <wtf/text/MakeString.h>

#if ENABLE(BAR) || (ENABLE(BAR) && !ENABLE(BAZ)) || (!ENABLE(BAR) && !ENABLE(FOO)) || (ENABLE(BAR) && ENABLE(BAZ)) || (ENABLE(BAR) && ENABLE(FOO)) || (!ENABLE(BAR) && ENABLE(FOO)) || !ENABLE(BAR) || ENABLE(BAZ) || ENABLE(FOO) || !ENABLE(FOO)
#include "JSDOMConvertNumbers.h"
#endif

namespace WebCore {
using namespace JSC;

// Attributes

static JSC_DECLARE_CUSTOM_GETTER(jsTestConditionalConstructor);
#if ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooEnabled);
#endif
#if !ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooDisabled);
#endif
#if ENABLE(BAR) || ENABLE(BAZ)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_barOrBazEnabled);
#endif
#if !ENABLE(BAR) || ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooEnabledOrBarDisabled);
#endif
#if !ENABLE(BAR) || !ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooOrBarBothDisabled);
#endif
#if ENABLE(BAR) && ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooAndBarEnabled);
#endif
#if !ENABLE(BAR) && ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooAndBarDisabled);
#endif
#if !ENABLE(BAR) && !ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooAndBarBothDisabled);
#endif
#if (ENABLE(BAR) && ENABLE(BAZ)) || ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooOrBarAndBaz);
#endif
#if (ENABLE(BAR) && ENABLE(FOO)) || ENABLE(BAZ)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooAndBarOrBaz);
#endif
#if (ENABLE(BAR) && !ENABLE(BAZ)) || ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooOrBarAndBazDisabled);
#endif
#if (!ENABLE(BAR) && ENABLE(FOO)) || ENABLE(BAZ)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooAndBarDisabledOrBaz);
#endif
#if (ENABLE(BAR) && ENABLE(BAZ)) || !ENABLE(FOO)
static JSC_DECLARE_CUSTOM_GETTER(jsTestConditional_fooDisabledOrBarAndBaz);
#endif

class JSTestConditionalPrototype final : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSTestConditionalPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSTestConditionalPrototype* ptr = new (NotNull, JSC::allocateCell<JSTestConditionalPrototype>(vm)) JSTestConditionalPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    template<typename CellType, JSC::SubspaceAccess>
    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSTestConditionalPrototype, Base);
        return &vm.plainObjectSpace();
    }
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSTestConditionalPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};
STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSTestConditionalPrototype, JSTestConditionalPrototype::Base);

using JSTestConditionalDOMConstructor = JSDOMConstructorNotConstructable<JSTestConditional>;

template<> const ClassInfo JSTestConditionalDOMConstructor::s_info = { "TestConditional"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTestConditionalDOMConstructor) };

template<> JSValue JSTestConditionalDOMConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSTestConditionalDOMConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->length, jsNumber(0), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    JSString* nameString = jsNontrivialString(vm, "TestConditional"_s);
    m_originalName.set(vm, this, nameString);
    putDirect(vm, vm.propertyNames->name, nameString, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum);
    putDirect(vm, vm.propertyNames->prototype, JSTestConditional::prototype(vm, globalObject), JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::DontEnum | JSC::PropertyAttribute::DontDelete);
}

/* Hash table for prototype */

static const std::array<HashTableValue, 14> JSTestConditionalPrototypeTableValues {
    HashTableValue { "constructor"_s, static_cast<unsigned>(PropertyAttribute::DontEnum), NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditionalConstructor, 0 } },
#if ENABLE(FOO)
    HashTableValue { "fooEnabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooEnabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if !ENABLE(FOO)
    HashTableValue { "fooDisabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooDisabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(BAR) || ENABLE(BAZ)
    HashTableValue { "barOrBazEnabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_barOrBazEnabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if !ENABLE(BAR) || ENABLE(FOO)
    HashTableValue { "fooEnabledOrBarDisabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooEnabledOrBarDisabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if !ENABLE(BAR) || !ENABLE(FOO)
    HashTableValue { "fooOrBarBothDisabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooOrBarBothDisabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if ENABLE(BAR) && ENABLE(FOO)
    HashTableValue { "fooAndBarEnabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooAndBarEnabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if !ENABLE(BAR) && ENABLE(FOO)
    HashTableValue { "fooAndBarDisabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooAndBarDisabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if !ENABLE(BAR) && !ENABLE(FOO)
    HashTableValue { "fooAndBarBothDisabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooAndBarBothDisabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if (ENABLE(BAR) && ENABLE(BAZ)) || ENABLE(FOO)
    HashTableValue { "fooOrBarAndBaz"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooOrBarAndBaz, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if (ENABLE(BAR) && ENABLE(FOO)) || ENABLE(BAZ)
    HashTableValue { "fooAndBarOrBaz"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooAndBarOrBaz, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if (ENABLE(BAR) && !ENABLE(BAZ)) || ENABLE(FOO)
    HashTableValue { "fooOrBarAndBazDisabled"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooOrBarAndBazDisabled, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if (!ENABLE(BAR) && ENABLE(FOO)) || ENABLE(BAZ)
    HashTableValue { "fooAndBarDisabledOrBaz"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooAndBarDisabledOrBaz, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
#if (ENABLE(BAR) && ENABLE(BAZ)) || !ENABLE(FOO)
    HashTableValue { "fooDisabledOrBarAndBaz"_s, JSC::PropertyAttribute::ReadOnly | JSC::PropertyAttribute::CustomAccessor | JSC::PropertyAttribute::DOMAttribute, NoIntrinsic, { HashTableValue::GetterSetterType, jsTestConditional_fooDisabledOrBarAndBaz, 0 } },
#else
    HashTableValue { { }, 0, NoIntrinsic, { HashTableValue::End } },
#endif
};

const ClassInfo JSTestConditionalPrototype::s_info = { "TestConditional"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTestConditionalPrototype) };

void JSTestConditionalPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSTestConditional::info(), JSTestConditionalPrototypeTableValues, *this);
    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
}

const ClassInfo JSTestConditional::s_info = { "TestConditional"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSTestConditional) };

JSTestConditional::JSTestConditional(Structure* structure, JSDOMGlobalObject& globalObject, Ref<TestConditional>&& impl)
    : JSDOMWrapper<TestConditional>(structure, globalObject, WTFMove(impl))
{
}

static_assert(!std::is_base_of<ActiveDOMObject, TestConditional>::value, "Interface is not marked as [ActiveDOMObject] even though implementation class subclasses ActiveDOMObject.");

JSObject* JSTestConditional::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    auto* structure = JSTestConditionalPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());
    structure->setMayBePrototype(true);
    return JSTestConditionalPrototype::create(vm, &globalObject, structure);
}

JSObject* JSTestConditional::prototype(VM& vm, JSDOMGlobalObject& globalObject)
{
    return getDOMPrototype<JSTestConditional>(vm, globalObject);
}

JSValue JSTestConditional::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTestConditionalDOMConstructor, DOMConstructorID::TestConditional>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSTestConditional::destroy(JSC::JSCell* cell)
{
    SUPPRESS_MEMORY_UNSAFE_CAST JSTestConditional* thisObject = static_cast<JSTestConditional*>(cell);
    thisObject->JSTestConditional::~JSTestConditional();
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditionalConstructor, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName))
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto* prototype = jsDynamicCast<JSTestConditionalPrototype*>(JSValue::decode(thisValue));
    if (!prototype) [[unlikely]]
        return throwVMTypeError(lexicalGlobalObject, throwScope);
    return JSValue::encode(JSTestConditional::getConstructor(vm, prototype->globalObject()));
}

#if ENABLE(FOO)
static inline JSValue jsTestConditional_fooEnabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooEnabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooEnabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooEnabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if !ENABLE(FOO)
static inline JSValue jsTestConditional_fooDisabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooDisabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooDisabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooDisabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(BAR) || ENABLE(BAZ)
static inline JSValue jsTestConditional_barOrBazEnabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.barOrBazEnabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_barOrBazEnabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_barOrBazEnabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if !ENABLE(BAR) || ENABLE(FOO)
static inline JSValue jsTestConditional_fooEnabledOrBarDisabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooEnabledOrBarDisabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooEnabledOrBarDisabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooEnabledOrBarDisabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if !ENABLE(BAR) || !ENABLE(FOO)
static inline JSValue jsTestConditional_fooOrBarBothDisabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooOrBarBothDisabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooOrBarBothDisabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooOrBarBothDisabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if ENABLE(BAR) && ENABLE(FOO)
static inline JSValue jsTestConditional_fooAndBarEnabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooAndBarEnabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooAndBarEnabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooAndBarEnabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if !ENABLE(BAR) && ENABLE(FOO)
static inline JSValue jsTestConditional_fooAndBarDisabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooAndBarDisabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooAndBarDisabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooAndBarDisabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if !ENABLE(BAR) && !ENABLE(FOO)
static inline JSValue jsTestConditional_fooAndBarBothDisabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooAndBarBothDisabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooAndBarBothDisabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooAndBarBothDisabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if (ENABLE(BAR) && ENABLE(BAZ)) || ENABLE(FOO)
static inline JSValue jsTestConditional_fooOrBarAndBazGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooOrBarAndBaz())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooOrBarAndBaz, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooOrBarAndBazGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if (ENABLE(BAR) && ENABLE(FOO)) || ENABLE(BAZ)
static inline JSValue jsTestConditional_fooAndBarOrBazGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooAndBarOrBaz())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooAndBarOrBaz, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooAndBarOrBazGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if (ENABLE(BAR) && !ENABLE(BAZ)) || ENABLE(FOO)
static inline JSValue jsTestConditional_fooOrBarAndBazDisabledGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooOrBarAndBazDisabled())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooOrBarAndBazDisabled, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooOrBarAndBazDisabledGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if (!ENABLE(BAR) && ENABLE(FOO)) || ENABLE(BAZ)
static inline JSValue jsTestConditional_fooAndBarDisabledOrBazGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooAndBarDisabledOrBaz())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooAndBarDisabledOrBaz, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooAndBarDisabledOrBazGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

#if (ENABLE(BAR) && ENABLE(BAZ)) || !ENABLE(FOO)
static inline JSValue jsTestConditional_fooDisabledOrBarAndBazGetter(JSGlobalObject& lexicalGlobalObject, JSTestConditional& thisObject)
{
    SUPPRESS_UNCOUNTED_LOCAL auto& vm = JSC::getVM(&lexicalGlobalObject);
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    SUPPRESS_UNCOUNTED_LOCAL auto& impl = thisObject.wrapped();
    RELEASE_AND_RETURN(throwScope, (toJS<IDLLong>(lexicalGlobalObject, throwScope, impl.fooDisabledOrBarAndBaz())));
}

JSC_DEFINE_CUSTOM_GETTER(jsTestConditional_fooDisabledOrBarAndBaz, (JSGlobalObject* lexicalGlobalObject, EncodedJSValue thisValue, PropertyName attributeName))
{
    return IDLAttribute<JSTestConditional>::get<jsTestConditional_fooDisabledOrBarAndBazGetter, CastedThisErrorBehavior::Assert>(*lexicalGlobalObject, thisValue, attributeName);
}

#endif

JSC::GCClient::IsoSubspace* JSTestConditional::subspaceForImpl(JSC::VM& vm)
{
    return WebCore::subspaceForImpl<JSTestConditional, UseCustomHeapCellType::No>(vm, "JSTestConditional"_s,
        [] (auto& spaces) { return spaces.m_clientSubspaceForTestConditional.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_clientSubspaceForTestConditional = std::forward<decltype(space)>(space); },
        [] (auto& spaces) { return spaces.m_subspaceForTestConditional.get(); },
        [] (auto& spaces, auto&& space) { spaces.m_subspaceForTestConditional = std::forward<decltype(space)>(space); }
    );
}

void JSTestConditional::analyzeHeap(JSCell* cell, HeapAnalyzer& analyzer)
{
    auto* thisObject = jsCast<JSTestConditional*>(cell);
    analyzer.setWrappedObjectForCell(cell, &thisObject->wrapped());
    if (RefPtr context = thisObject->scriptExecutionContext())
        analyzer.setLabelForCell(cell, makeString("url "_s, context->url().string()));
    Base::analyzeHeap(cell, analyzer);
}

bool JSTestConditionalOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, AbstractSlotVisitor& visitor, ASCIILiteral* reason)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    UNUSED_PARAM(reason);
    return false;
}

void JSTestConditionalOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    SUPPRESS_MEMORY_UNSAFE_CAST auto* jsTestConditional = static_cast<JSTestConditional*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsTestConditional->protectedWrapped().ptr(), jsTestConditional);
}

WTF_ALLOW_UNSAFE_BUFFER_USAGE_BEGIN
#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7TestConditional@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15TestConditionalE[]; }
#endif
template<std::same_as<TestConditional> T>
static inline void verifyVTable(TestConditional* ptr) 
{
    if constexpr (std::is_polymorphic_v<T>) {
        const void* actualVTablePointer = getVTablePointer<T>(ptr);
#if PLATFORM(WIN)
        void* expectedVTablePointer = __identifier("??_7TestConditional@WebCore@@6B@");
#else
        void* expectedVTablePointer = &_ZTVN7WebCore15TestConditionalE[2];
#endif

        // If you hit this assertion you either have a use after free bug, or
        // TestConditional has subclasses. If TestConditional has subclasses that get passed
        // to toJS() we currently require TestConditional you to opt out of binding hardening
        // by adding the SkipVTableValidation attribute to the interface IDL definition
        RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
    }
}
#endif
WTF_ALLOW_UNSAFE_BUFFER_USAGE_END

JSC::JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<TestConditional>&& impl)
{
#if ENABLE(BINDING_INTEGRITY)
    verifyVTable<TestConditional>(impl.ptr());
#endif
    return createWrapper<TestConditional>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, TestConditional& impl)
{
    return wrap(lexicalGlobalObject, globalObject, impl);
}

TestConditional* JSTestConditional::toWrapped(JSC::VM&, JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSTestConditional*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
