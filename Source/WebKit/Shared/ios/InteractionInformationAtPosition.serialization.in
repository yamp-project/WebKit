# Copyright (C) 2022 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#if PLATFORM(IOS_FAMILY)

[Nested] enum class WebKit::InteractionInformationAtPosition::Selectability : uint8_t {
    Selectable,
    UnselectableDueToFocusableElement,
    UnselectableDueToUserSelectNoneOrQuirk,
    UnselectableDueToMediaControls,
};

struct WebKit::InteractionInformationAtPosition {
    WebKit::InteractionInformationRequest request;

    bool canBeValid;
    std::optional<bool> nodeAtPositionHasDoubleClickHandler;

    WebKit::InteractionInformationAtPosition::Selectability selectability;

    bool isSelected;
    bool prefersDraggingOverTextSelection;
    bool isNearMarkedText;
    bool touchCalloutEnabled;
    bool isLink;
    bool isImage;
#if ENABLE(MODEL_PROCESS)
    bool isInteractiveModel;
#endif
    bool isAttachment;
    bool isAnimatedImage;
    bool isAnimating;
    bool canShowAnimationControls;
    bool isPausedVideo;
    bool isElement;
    bool isContentEditable;
    Markable<WebCore::ScrollingNodeID> containerScrollingNodeID;
#if ENABLE(DATA_DETECTION)
    bool isDataDetectorLink;
#endif
    bool preventTextInteraction;
    bool elementContainsImageOverlay;
    bool isImageOverlayText;
#if ENABLE(SPATIAL_IMAGE_DETECTION)
    bool isSpatialImage;
#endif
    bool isInPlugin;
    bool needsPointerTouchCompatibilityQuirk;
    WebCore::FloatPoint adjustedPointForNodeRespondingToClickEvents;
    URL url;
    URL imageURL;
    String imageMIMEType;
    String title;
    String idAttribute;
    WebCore::IntRect bounds;
#if PLATFORM(MACCATALYST)
    WebCore::IntRect caretRect;
#endif
    RefPtr<WebCore::ShareableBitmap> image;
    String textBefore;
    String textAfter;

    WebKit::CursorContext cursorContext;

    RefPtr<WebCore::TextIndicator> textIndicator;
#if ENABLE(DATA_DETECTION)
    String dataDetectorIdentifier;
    [SecureCodingAllowed=[NSArray.class, PAL::getDDScannerResultClass()]] RetainPtr<NSArray> dataDetectorResults;
    WebCore::IntRect dataDetectorBounds;
#endif

    std::optional<WebCore::ElementContext> elementContext;
    std::optional<WebCore::ElementContext> hostImageOrVideoElementContext;

#if ENABLE(ACCESSIBILITY_ANIMATION_CONTROL)
    Vector<WebCore::ElementAnimationContext> animationsAtPoint;
#endif
};

#endif
